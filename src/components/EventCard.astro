---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

interface Props {
    event: CollectionEntry<"events">;
}

const { event } = Astro.props;
---

<!-- Card -->
<event-card>
    <div
        class="relative h-full overflow-hidden flex flex-col border border-gray-200 hover:border-transparent hover:shadow-lg focus:outline-none focus:border-transparent focus:shadow-lg transition rounded-xl pt-5 dark:border-neutral-700 dark:hover:border-transparent dark:hover:shadow-black/40 dark:focus:border-transparent dark:focus:shadow-black/40"
        id="card"
    >
        <div>
            <!-- Slider -->
            <div
                data-hs-carousel='{
                    "loadingClasses": "opacity-0",
                    "dotsItemClasses": "hs-carousel-active:bg-blue-700 hs-carousel-active:border-blue-700 size-3 border border-gray-400 rounded-full cursor-pointer dark:border-neutral-600 dark:hs-carousel-active:bg-blue-500 dark:hs-carousel-active:border-blue-500",
                    "isAutoPlay": true
                }'
                class="w-full h-48 duration-700 transition-[height] px-5 relative"
                id="image"
            >
                <div
                    class="hs-carousel relative h-full w-full bg-white rounded-lg overflow-hidden"
                >
                    <div
                        class="hs-carousel-body absolute top-0 bottom-0 start-0 flex flex-nowrap transition-transform duration-700 opacity-0"
                    >
                        {event.data.images.map(image => (
                            <div class="hs-carousel-slide flex justify-center">
                                <Image
                                    class="object-cover object-top rounded-xl h-full"
                                    src={image.src}
                                    alt={image.alt}
                                />
                            </div>
                        ))}

                    </div>
                </div>
                <div
                    id="carousel-pagination"
                    class="transition-opacity duration-500 delay-75 hs-carousel-pagination flex justify-center absolute bottom-3 start-0 end-0 space-x-2"
                >
                </div>
            </div>
            <!-- End Slider -->
        </div>
        <span class="mb-6">
            <div class="my-6 px-5">
                <h3
                    class="text-xl font-semibold text-gray-800 dark:text-neutral-300 dark:group-hover:text-white"
                >
                    {event.data.title}
                </h3>
                <p class="mt-5 text-gray-600 dark:text-neutral-400">
                    {event.data.description}
                </p>
            </div>
            <div class="mt-auto flex items-center gap-x-3 px-5">
                <div>
                    <h5 class="text-sm text-gray-800 dark:text-neutral-200">
                        From <date
                            >{
                                event.data.startDate.toLocaleString("en-US", {
                                    weekday: "long",
                                    month: "long",
                                    day: "numeric",
                                    year: "numeric",
                                    hour: "numeric",
                                    minute: "numeric",
                                })
                            }</date
                        > to <date
                            >{
                                event.data.endDate.toLocaleString("en-US", {
                                    weekday: "long",
                                    month: "long",
                                    day: "numeric",
                                    year: "numeric",
                                    hour: "numeric",
                                    minute: "numeric",
                                })
                            }</date
                        >
                    </h5>
                </div>
            </div>
        </span>
        <span class="mb-6 hidden h-48" id="additional-content">
            <div class="my-6 px-5">
                <p class="mt-5 text-gray-600 dark:text-neutral-400">
                    {
                        event.data.startDate > new Date() ? (
                            <span>
                                Signup{" "}
                                <a
                                    href={event.data.link}
                                    class="underline text-blue-500"
                                >
                                    here
                                </a>
                                !
                                <>
                                    <br />
                                    <br />
                                </>
                            </span>
                        ) : (
                            <span />
                        )
                    }
                    {event.data.text}
                </p>
            </div>
        </span>
        <div
            id="openButton"
            class="absolute bottom-0 h-6 cursor-pointer mt-2 w-full bt-2 border-gray-200 text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-400 dark:border-neutral-700 dark:hover:bg-neutral-700 dark:focus:bg-neutral-700"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="mx-auto rotate-0 transition-transform"
                id="chevron"><path d="m18 15-6-6-6 6"></path></svg
            >
        </div>
    </div>
</event-card>
<!-- End Card -->

<script>
    class EventCard extends HTMLElement {
        clicked: boolean = false;

        connectedCallback() {
            const card = this.querySelector<HTMLElement>("#card")!;
            const image = this.querySelector<HTMLImageElement>("#image")!;
            const carouselPagination = this.querySelector<HTMLImageElement>("#carousel-pagination")!;
            const chevron = this.querySelector<SVGElement>("#chevron")!;
            const additionalContent = this.querySelector<HTMLElement>(
                "#additional-content"
            )!;

            card.addEventListener("mouseenter", () => {
                this.openOrClose(image, chevron, carouselPagination, additionalContent);
            });

            card.addEventListener("mouseleave", () => {
                this.openOrClose(image, chevron, carouselPagination, additionalContent);
            });

            card.addEventListener("click", () => {
                this.clicked = !this.clicked;
                this.openOrClose(image, chevron, carouselPagination, additionalContent);
            });

            const initialHeight = card.offsetHeight;
            card.style.height = `${initialHeight}px`;
        }

        openOrClose(
            image: HTMLImageElement,
            chevron: SVGElement,
            carouselPagination: HTMLElement,
            additionalContent: HTMLElement
        ) {
            if (this.clicked) {
                image.classList.add("h-0");
                image.classList.remove("h-48");
                chevron.classList.add("rotate-180");
                additionalContent.classList.remove("hidden");
                carouselPagination.classList.add("opacity-0");
                carouselPagination.classList.remove("opacity-100");
            } else {
                image.classList.remove("h-0");
                image.classList.add("h-48");
                chevron.classList.remove("rotate-180");
                carouselPagination.classList.add("opacity-100");
                carouselPagination.classList.remove("opacity-0");
            }
        }
    }

    customElements.define("event-card", EventCard);
</script>
