---
import { Image } from "astro:assets";

interface Props {
    title: string;
    description: string;
    text: string;
    image: {
        src: ImageMetadata;
        alt: string;
    };
    link: string;
}

const { title, description, text, image } = Astro.props;
---

<!-- Card -->
<event-card
    class="relative"
    data-aos="fade-up"
    data-aos-anchor-placement="top-bottom"
    data-aos-delay="0"
    class="cursor-pointer"
>
    <div class="cardSide relative group flex flex-col focus:outline-none flippable" id="front">
        <div class="relative pt-[50%] sm:pt-[70%] rounded-xl overflow-hidden">
            <Image
                class="size-full absolute top-0 start-0 object-cover group-hover:scale-105 group-focus:scale-105 transition-transform duration-500 ease-in-out rounded-xl"
                {...image}
            />
        </div>

        <div class="mt-7">
            <h3
                class="text-xl font-semibold text-gray-800 group-hover:text-gray-600 dark:text-neutral-300 dark:group-hover:text-white"
            >
                {title}
            </h3>
            <p class="mt-3 text-gray-800 dark:text-neutral-200">
                {description}
            </p>
            <p
                class="mt-5 inline-flex items-center gap-x-1 text-sm text-blue-600 decoration-2 group-hover:underline group-focus:underline font-medium dark:text-blue-500"
            >
                Learn more
                <svg
                    class="shrink-0 size-4"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg
                >
            </p>
        </div>
    </div>

    <div
        class="flipped cardSide absolute top-0 group flex flex-col focus:outline-none flippable"
        id="back"
    >
    <h3
        class="text-xl font-semibold text-gray-800 group-hover:text-gray-600 dark:text-neutral-300 dark:group-hover:text-white"
    >
        {title}
    </h3>
    <p class="mt-3 text-gray-800 dark:text-neutral-200" set:html={text} />
    </div>
</event-card>
<!-- End Card -->

<style>
    .flippable {
        transform-style: preserve-3d;
        transition: all 0.8s ease;
        cursor: pointer;
    }

    .cardSide {
        backface-visibility: hidden;
    }

    .flipped {
        transform: rotateY(180deg);
    }
</style>

<script>
    class Card extends HTMLElement {
        clicked: boolean = false;

        connectedCallback() {
            const front = this.querySelector<HTMLElement>("#front")!;
            const back = this.querySelector<HTMLElement>("#back")!;

            this.addEventListener("click", () => {
                this.toggle(front, back);
            });
        }

        toggle(front: HTMLElement, back: HTMLElement) {
            this.clicked = !this.clicked;
            console.log(this.clicked);

            if (this.clicked) {
                // front.classList.add("absolute");
                // back.classList.add("relative");

                // back.classList.remove("absolute");
                // front.classList.remove("relative");

                front.classList.add("flipped");
                back.classList.remove("flipped");
            } else {
                // front.classList.remove("absolute");
                // back.classList.remove("relative");
                
                // back.classList.add("absolute");
                // front.classList.add("relative");

                back.classList.add("flipped");
                front.classList.remove("flipped");
            }
        }
    }

    customElements.define("event-card", Card);
</script>
